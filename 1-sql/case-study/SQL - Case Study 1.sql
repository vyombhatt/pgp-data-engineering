
--CREATE DATABASE INTELLIPAAT;
USE INTELLIPAAT;

--Problem Statement:
--You are a database administrator. You want to use the data to answer a few questions about your customers, especially about the sales and profit coming
--from different states, money spent in marketing and various other factors such as COGS (Cost of Goods Sold), budget profit etc. You plan on using these insights
--to help find out which items are being sold the most. You have been provided with the sample of the overall customer data due to privacy issues. But you hope
--that these samples are enough for you to write fully functioning SQL queries to help answer the questions.

--Dataset:
--The 3 key datasets for this case study:
--a. FactTable: The Fact Table has 14 columns mentioned below and 4200 rows. Date, ProductID, Profit, Sales, Margin, COGS, Total Expenses, Marketing, Inventory, 
--	Budget Profit, Budget COGS, Budget Margin, Budget Sales, and Area Code
--	Note: COGS stands for Cost of Goods Sold

SELECT * FROM FACT;
SELECT COUNT(*) FROM FACT;

--b. ProductTable: The ProductTable has four columns named Product Type, Product, ProductID, and Type. It has 13 rows which can be broken down into further details 
--	to retrieve the information mentioned in theFactTable. 

SELECT * FROM PRODUCT;
SELECT COUNT(*) FROM PRODUCT;

--c. LocationTable: Finally, the LocationTable has 156 rows and follows a similar approach to ProductTable. It has four columns named Area Code, State, Market, 
--	and Market Size.

SELECT * FROM LOCATION;
SELECT COUNT(*) FROM LOCATION;


--Tasks to be performed:
--1. Display the number of states present in the LocationTable.

SELECT COUNT(DISTINCT STATE) AS NO_OF_STATES
FROM LOCATION;

--2. How many products are of regular type?

SELECT COUNT(DISTINCT PRODUCTID) NO_OF_PRODUCTS
FROM PRODUCT
WHERE TYPE = 'Regular';

--3. How much spending has been done on marketing of product ID 1?

SELECT SUM(MARKETING) AS MKTG_SPEND
FROM FACT
WHERE PRODUCTID = 1;

--4. What is the minimum sales of a product?

SELECT TOP 1 SALES AS MIN_SALES FROM 
	(
	SELECT PRODUCTID, SUM(SALES) AS SALES
	FROM FACT
	GROUP BY PRODUCTID
	) A
ORDER BY SALES;

--5. Display the max Cost of Good Sold (COGS).

SELECT MAX(COGS) AS MAX_COGS
FROM FACT;

--6. Display the details of the product where product type is coffee.

SELECT *
FROM PRODUCT
WHERE PRODUCTTYPE = 'COFFEE';

--7. Display the details where total expenses are greater than 40.

SELECT *
FROM FACT
WHERE TOTALEXPENSES > 40;

--8. What is the average sales in area code 719?

SELECT AVG(SALES) AS AVG_SALES
FROM FACT
WHERE AREACODE = 719;

--9. Find out the total profit generated by Colorado state.

SELECT SUM(A.PROFIT) AS COLORADO_PROFIT
FROM FACT A
INNER JOIN LOCATION B
  ON A.AREACODE = B.AREACODE
WHERE B.STATE = 'Colorado';

--10. Display the average inventory for each product ID.

SELECT PRODUCTID, AVG(INVENTORY) AS AVG_INVENTORY
FROM FACT
GROUP BY PRODUCTID
ORDER BY PRODUCTID;

--11. Display state in a sequential order in a Location Table.

SELECT DISTINCT STATE
FROM LOCATION
ORDER BY STATE;

--12. Display the average budget of the Product where the average budget margin should be greater than 100.

WITH PROD_BUDGETMARGIN AS (
	SELECT PRODUCTID, AVG(BUDGETPROFIT) AS AVG_BUDGET_PROFIT, AVG(BUDGETCOGS) AS AVG_BUDGET_COGS,
		AVG(BUDGETMARGIN) AS AVG_BUDGET_MARGIN, AVG(BUDGETSALES) AS AVG_BUDGET_SALES
	FROM FACT
	GROUP BY PRODUCTID)
SELECT *
FROM PROD_BUDGETMARGIN
WHERE AVG_BUDGET_MARGIN > 100
ORDER BY PRODUCTID;

--13. What is the total sales done on date 2010-01-01?

SELECT SUM(SALES) AS TOTAL_SALES
FROM FACT
WHERE DATE = '1/1/2010';

--14. Display the average total expense of each product ID on an individual date.

WITH DAILY_EXP AS (
	SELECT DATE, PRODUCTID, SUM(TOTALEXPENSES) AS TOTALEXPENSES
	FROM FACT
	GROUP BY DATE, PRODUCTID 
	)
SELECT PRODUCTID, AVG(TOTALEXPENSES) AS AVG_TOT_EXPENSE
FROM DAILY_EXP
GROUP BY PRODUCTID;

--15. Display the table with the following attributes such as date, productID, product_type, product, sales, profit, state, area_code.

SELECT A.DATE, A.PRODUCTID, B.PRODUCTTYPE, B.PRODUCT, A.SALES, A.PROFIT, C.STATE, C.AREACODE
FROM FACT A
INNER JOIN PRODUCT B
  ON A.PRODUCTID = B.PRODUCTID
INNER JOIN LOCATION C
  ON A.AREACODE = C.AREACODE
ORDER BY 1,2;

--16. Display the rank without any gap to show the sales wise rank.

SELECT *, DENSE_RANK() OVER (ORDER BY SALES DESC)
FROM FACT;

--17. Find the state wise profit and sales.

SELECT B.STATE, SUM(A.PROFIT) AS PROFIT, SUM(A.SALES) AS SALES
FROM FACT A
INNER JOIN LOCATION B
  ON A.AREACODE = B.AREACODE
GROUP BY STATE
ORDER BY STATE;

--18. Find the state wise profit and sales along with the product name.

SELECT B.STATE, C.PRODUCT, SUM(A.PROFIT) AS PROFIT, SUM(A.SALES) AS SALES
FROM FACT A
INNER JOIN LOCATION B
  ON A.AREACODE = B.AREACODE
INNER JOIN PRODUCT C
  ON A.PRODUCTID = C.PRODUCTID
GROUP BY STATE, PRODUCT
ORDER BY STATE, PRODUCT;

--19. If there is an increase in sales of 5%, calculate the increasedsales.

SELECT *, 1.05 * SALES AS INCREASED_SALES
FROM FACT;

--20. Find the maximum profit along with the product ID and producttype.

WITH PROFIT_DATA AS (
	SELECT A.PRODUCTID, B.PRODUCTTYPE, SUM(PROFIT) AS PROFIT
	FROM FACT A
	INNER JOIN PRODUCT B
	  ON A.PRODUCTID = B.PRODUCTID
	GROUP BY A.PRODUCTID, B.PRODUCTTYPE
	)
SELECT TOP 1 *
FROM PROFIT_DATA
ORDER BY PROFIT DESC;

--21. Create a stored procedure to fetch the result according to the product type from Product Table.

DROP PROCEDURE PROD_PROC;

CREATE PROCEDURE PROD_PROC (@PRODUCT_TYPE VARCHAR)
AS
SELECT *
FROM PRODUCT
WHERE PRODUCTTYPE = @PRODUCT_TYPE;

EXEC PROD_PROC @PRODUCT_TYPE = 'Coffee'

--22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.

SELECT *, CASE WHEN TOTALEXPENSES < 60 THEN 'PROFIT' ELSE 'LOSS' END AS PROFIT_OR_LOSS
FROM FACT;

--23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order.

SELECT DATE, PRODUCTID, SUM(SALES) AS SALES
FROM FACT
GROUP BY ROLLUP (DATE, PRODUCTID);

--24. Apply union and intersection operator on the tables which consist of attribute area code.

SELECT AREACODE FROM FACT
UNION 
SELECT AREACODE FROM LOCATION;

SELECT AREACODE FROM FACT
INTERSECTION 
SELECT AREACODE FROM LOCATION;

--25. Create a user-defined function for the product table to fetch a particular product type based upon the user’s preference.

CREATE FUNCTION PROD_TYPE (@PRODUCT VARCHAR)
RETURNS TABLE AS 
RETURN
	SELECT DISTINCT PRODUCTTYPE
	FROM PRODUCT
	WHERE PRODUCT = @PRODUCT;

SELECT * FROM PROD_TYPE('Amaretto');

--26. Change the product type from coffee to tea where product ID is 1 and undo it.

BEGIN TRANSACTION;
UPDATE PRODUCT
SET PRODUCT = 'TEA'
WHERE PRODUCTID = 1;
SAVE TRANSACTION CHECKPOINT1;
UPDATE PRODUCT
SET PRODUCT = 'COFFEE'
WHERE PRODUCTID = 1;
COMMIT TRANSACTION;

--27. Display the date, product ID and sales where total expenses are between 100 to 200.

SELECT DATE, PRODUCTID, SALES
FROM FACT 
WHERE TOTALEXPENSES BETWEEN 100 AND 200;

--28. Delete the records in the Product Table for regular type.

DELETE FROM PRODUCT
WHERE TYPE = 'Regular';

--29. Display the ASCII value of the fifth character from the columnProduct.

SELECT PRODUCT, SUBSTRING(PRODUCT, 5, 1) FIFTH_ELEMENT, ASCII(SUBSTRING(PRODUCT, 5, 1)) FIFTH_ELEMENT_ASCII
FROM PRODUCT;

